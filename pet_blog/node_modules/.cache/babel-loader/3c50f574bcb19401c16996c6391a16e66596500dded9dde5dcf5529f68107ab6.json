{"ast":null,"code":"// Checks if new post form has all the values\nexport const validatePost = newPost => {\n  const keys = Object.keys(newPost);\n  const reduce = keys.reduce((total, item) => {\n    const key = !newPost[item] && item;\n    if (key) {\n      return {\n        ...total,\n        [key]: ''\n      };\n    } else {\n      return total;\n    }\n  }, {});\n  return Object.keys(reduce).length === 0 ? '' : reduce;\n};\n\n// Cheacks if user password ia valid\nexport const passwordCheck = password => {\n  const upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  const lowerChars = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  const number = '0123456789'.split('');\n  const upper = [];\n  const lower = [];\n  const num = [];\n  password.split('').forEach(i => {\n    if (upperChars.includes(i)) {\n      upper.push(i);\n    } else if (lowerChars.includes(i)) {\n      lower.push(i);\n    } else if (number.includes(i)) {\n      num.push(i);\n    }\n  });\n  if (upper.length > 0 && lower.length > 0 && num.length > 0) {\n    return true;\n  }\n  return false;\n};\n\n// Checks if register form is valid\nexport const newUserInfoCheck = newUser => {\n  let invalid = {};\n  const {\n    username,\n    password,\n    passwordConfirmation\n  } = newUser;\n  if (!Object.values(newUser).includes('') && newUser.password === newUser.passwordConfirmation) {\n    return 'validated';\n  }\n  if (!username) {\n    invalid['username'] = 'This field is required.';\n  }\n  if (!password) {\n    invalid['password'] = 'This field is required.';\n  }\n  if (!passwordConfirmation) {\n    invalid['passwordConfirmation'] = 'This field is required.';\n  }\n  if (password !== passwordConfirmation) {\n    invalid['passwordMismatch'] = 'Password confirmation failed.';\n  }\n  return invalid;\n};\n\n// User login check values\nexport const loginInfoValidation = user => {\n  const {\n    username,\n    password\n  } = user;\n  if (!username && !password) {\n    return {\n      username: 'null',\n      password: 'null'\n    };\n  }\n  if (!username) {\n    return {\n      username: 'null'\n    };\n  }\n  if (!password) {\n    return {\n      password: 'null'\n    };\n  }\n  return null;\n};","map":{"version":3,"names":["validatePost","newPost","keys","Object","reduce","total","item","key","length","passwordCheck","password","upperChars","split","lowerChars","number","upper","lower","num","forEach","i","includes","push","newUserInfoCheck","newUser","invalid","username","passwordConfirmation","values","loginInfoValidation","user"],"sources":["/home/anderson/DEV/projects/django/drf_react_pet_blog/frontend/pet_blog/src/utils/utils.js"],"sourcesContent":["\n// Checks if new post form has all the values\nexport const validatePost = (newPost)=> {\n    const keys = Object.keys(newPost)\n    const reduce = keys.reduce((total, item)=>{\n        const key = !newPost[item] && item\n        if(key){\n            return {...total,[key]:'' }\n        }else {\n            return total\n        }\n    }, {})\n    return Object.keys(reduce).length  === 0 ? '' : reduce\n}\n\n// Cheacks if user password ia valid\nexport const passwordCheck = (password) => {\n    const upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n    const lowerChars = 'abcdefghijklmnopqrstuvwxyz'.split('')\n    const number = '0123456789'.split('')\n\n    const upper = []\n    const lower = []\n    const num = []\n\n    password.split('').forEach((i) => {\n        if(upperChars.includes(i)){\n            upper.push(i)\n        }else if(lowerChars.includes(i)){\n            lower.push(i)\n        }else if(number.includes(i)){\n            num.push(i)\n        }\n    })\n    if(upper.length > 0 && lower.length > 0 && num.length > 0) {\n        return true\n    }\n    return false\n}\n\n// Checks if register form is valid\nexport const newUserInfoCheck = (newUser)=> {\n    let invalid = {}\n    const {username, password, passwordConfirmation} = newUser\n    \n    if(!Object.values(newUser).includes('')\n        &&newUser.password===newUser.passwordConfirmation){\n            return 'validated'\n\n    }if(!username) {\n        invalid['username'] = 'This field is required.'\n\n    }if(!password) {\n        invalid['password'] = 'This field is required.'\n\n    }if(!passwordConfirmation) {\n        invalid['passwordConfirmation'] = 'This field is required.'\n\n    }if(password !== passwordConfirmation) {\n        invalid['passwordMismatch'] = 'Password confirmation failed.'\n        \n    }\n    return invalid\n}\n\n// User login check values\nexport const loginInfoValidation = (user)=> {\n   const {username, password} = user\n   if(!username && !password) {\n        return {username: 'null', password: 'null'}\n\n   }if(!username) {\n        return {username: 'null'}\n\n   }if(!password) {\n        return {password: 'null'}\n   }\n   return null\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}