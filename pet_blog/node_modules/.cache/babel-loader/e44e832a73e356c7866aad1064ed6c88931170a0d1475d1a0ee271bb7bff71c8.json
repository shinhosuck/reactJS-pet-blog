{"ast":null,"code":"export const getTopicData = async url => {\n  const resp = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: null\n  });\n  const data = resp.json();\n  return data;\n};\nexport const getPostData = async url => {\n  const resp = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: null\n  });\n  const data = await resp.json();\n  return data;\n};\nexport const createPost = async (url, form) => {\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Token 8834f364eacb5ab894db16e8e1c564500166ffa5'\n    },\n    body: form\n  });\n  const data = await resp.json();\n  return data;\n};\n\n// export const register = async(url, body)=> {\n//     const resp = await fetch(url, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(body)\n//     })\n//     const data = await resp.json()\n//     console.log(resp)\n//     return data\n// }\n\nexport const register = async (url, body) => {\n  try {\n    const resp = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await resp.json();\n    return data;\n  } catch (error) {\n    console.log({\n      name: error.name,\n      message: error.message\n    });\n  }\n};\nexport const login = async (url, body) => {\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  const data = await resp.json();\n  return data;\n};","map":{"version":3,"names":["getTopicData","url","resp","fetch","method","headers","body","data","json","getPostData","createPost","form","register","JSON","stringify","error","console","log","name","message","login"],"sources":["/home/anderson/DEV/projects/django/drf_react_pet_blog/frontend/pet_blog/src/utils/api.js"],"sourcesContent":["\n\nexport const getTopicData = async(url)=> {\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: null\n    })\n    const data = resp.json()\n    return data\n}\n\n\nexport const getPostData = async(url)=> {\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: null\n    })\n    const data = await resp.json()\n    return data\n}\n\n\nexport const createPost = async(url, form)=>  {\n    const resp =  await fetch(url, {\n        method: 'POST', \n        headers: {\n            'Authorization': 'Token 8834f364eacb5ab894db16e8e1c564500166ffa5'\n        },\n        body: form\n    })\n    const data = await resp.json()\n    return data\n}\n\n\n// export const register = async(url, body)=> {\n//     const resp = await fetch(url, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(body)\n//     })\n//     const data = await resp.json()\n//     console.log(resp)\n//     return data\n// }\n\nexport const register = async(url, body)=> {\n    try {\n        const resp = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n        const data = await resp.json()\n        return data\n        \n    } catch (error) {\n        console.log({name:error.name, message:error.message})\n    }\n}\n\n\nexport const login = async(url, body)=> {\n    const resp = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    })\n    const data = await resp.json()\n    return data\n}"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAG,MAAMC,GAAG,IAAI;EACrC,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAMC,IAAI,GAAGL,IAAI,CAACM,IAAI,CAAC,CAAC;EACxB,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAME,WAAW,GAAG,MAAMR,GAAG,IAAI;EACpC,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAMG,UAAU,GAAG,MAAAA,CAAMT,GAAG,EAAEU,IAAI,KAAK;EAC1C,MAAMT,IAAI,GAAI,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC3BG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,eAAe,EAAE;IACrB,CAAC;IACDC,IAAI,EAAEK;EACV,CAAC,CAAC;EACF,MAAMJ,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,QAAQ,GAAG,MAAAA,CAAMX,GAAG,EAAEK,IAAI,KAAI;EACvC,IAAI;IACA,MAAMJ,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC1BG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACR,IAAI;IAC7B,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IAC9B,OAAOD,IAAI;EAEf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC;MAACC,IAAI,EAACH,KAAK,CAACG,IAAI;MAAEC,OAAO,EAACJ,KAAK,CAACI;IAAO,CAAC,CAAC;EACzD;AACJ,CAAC;AAGD,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAMnB,GAAG,EAAEK,IAAI,KAAI;EACpC,MAAMJ,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACR,IAAI;EAC7B,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}