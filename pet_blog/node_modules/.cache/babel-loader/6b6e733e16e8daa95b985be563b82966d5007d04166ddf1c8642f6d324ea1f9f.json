{"ast":null,"code":"export const getTopicData = async url => {\n  const resp = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: null\n  });\n  const data = resp.json();\n  return data;\n};\nexport const getPostData = async (url, token) => {\n  const resp = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token ? token : null}`\n    },\n    body: null\n  });\n  const data = await resp.json();\n  return data;\n};\nexport const getMyPosts = async (url, token) => {\n  const resp = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Token ${token ? token : null}`\n    },\n    body: null\n  });\n  const data = await resp.json();\n  return data;\n};\nexport const createPost = async (url, form, token) => {\n  console.log(token);\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Token ${token}`\n    },\n    body: form\n  });\n  const data = await resp.json();\n  return data;\n};\nexport const register = async (url, body) => {\n  try {\n    const resp = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await resp.json();\n    return data;\n  } catch (error) {\n    console.log({\n      name: error.name,\n      message: error.message\n    });\n  }\n};\nexport const login = async (url, body) => {\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  const data = await resp.json();\n  return data;\n};","map":{"version":3,"names":["getTopicData","url","resp","fetch","method","headers","body","data","json","getPostData","token","getMyPosts","createPost","form","console","log","register","JSON","stringify","error","name","message","login"],"sources":["/home/anderson/DEV/projects/django/drf_react_pet_blog/frontend/pet_blog/src/utils/api.js"],"sourcesContent":["\n\nexport const getTopicData = async(url)=> {\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: null\n    })\n    const data = resp.json()\n    return data\n}\n\n\nexport const getPostData = async(url, token)=> {\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token ? token : null}`\n        },\n        body: null\n    })\n    const data = await resp.json()\n    return data\n}\n\n\nexport const getMyPosts = async(url, token)=> {\n    const resp = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token ? token : null}`\n        },\n        body: null\n    })\n    const data = await resp.json()\n    return data\n}\n\n\nexport const createPost = async(url, form, token)=>  {\n    console.log(token)\n    const resp =  await fetch(url, {\n        method: 'POST', \n        headers: {\n            'Authorization': `Token ${token}`\n        },\n        body: form\n    })\n    const data = await resp.json()\n    return data\n}\n\n\nexport const register = async(url, body)=> {\n    try {\n        const resp = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n        const data = await resp.json()\n        return data\n\n    } catch (error) {\n        console.log({name:error.name, message:error.message})\n    }\n}\n\n\nexport const login = async(url, body)=> {\n    const resp = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    })\n    const data = await resp.json()\n    return data\n}"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAG,MAAMC,GAAG,IAAI;EACrC,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAMC,IAAI,GAAGL,IAAI,CAACM,IAAI,CAAC,CAAC;EACxB,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAMR,GAAG,EAAES,KAAK,KAAI;EAC3C,MAAMR,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQK,KAAK,GAAGA,KAAK,GAAG,IAAK;IACnD,CAAC;IACDJ,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAMI,UAAU,GAAG,MAAAA,CAAMV,GAAG,EAAES,KAAK,KAAI;EAC1C,MAAMR,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQK,KAAK,GAAGA,KAAK,GAAG,IAAK;IACnD,CAAC;IACDJ,IAAI,EAAE;EACV,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAMK,UAAU,GAAG,MAAAA,CAAMX,GAAG,EAAEY,IAAI,EAAEH,KAAK,KAAK;EACjDI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EAClB,MAAMR,IAAI,GAAI,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC3BG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,eAAe,EAAG,SAAQK,KAAM;IACpC,CAAC;IACDJ,IAAI,EAAEO;EACV,CAAC,CAAC;EACF,MAAMN,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC;AAGD,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAMf,GAAG,EAAEK,IAAI,KAAI;EACvC,IAAI;IACA,MAAMJ,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC1BG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACZ,IAAI;IAC7B,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;IAC9B,OAAOD,IAAI;EAEf,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZL,OAAO,CAACC,GAAG,CAAC;MAACK,IAAI,EAACD,KAAK,CAACC,IAAI;MAAEC,OAAO,EAACF,KAAK,CAACE;IAAO,CAAC,CAAC;EACzD;AACJ,CAAC;AAGD,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAMrB,GAAG,EAAEK,IAAI,KAAI;EACpC,MAAMJ,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC1BG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACZ,IAAI;EAC7B,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAC9B,OAAOD,IAAI;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}